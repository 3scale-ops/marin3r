apiVersion: kuttl.dev/v1beta1
kind: TestStep
commands:
  # Create a certificate to be delivered to envoy through xDS
  - command: openssl req -x509 -newkey rsa:2048 -keyout /tmp/key.pem -out /tmp/cert.pem -days 1 -nodes -subj '/CN=envoy1.defaul.svc'
  - command: kubectl create secret tls envoy1-cert --cert=/tmp/cert.pem --key=/tmp/key.pem
    namespaced: true

---
apiVersion: v1
kind: Pod
metadata:
  name: envoy1
spec:
  containers:
    - name: envoy
      image: envoyproxy/envoy:v1.14.1
      command: ["envoy"]
      args:
        [
          "-c",
          "/etc/envoy/bootstrap/config.json",
          "--component-log-level",
          "http:debug,connection:debug",
          "--service-cluster",
          "envoy1",
          "--service-node",
          "envoy1",
        ]
      ports:
        - name: admin
          containerPort: 9901
          protocol: TCP
        - name: https
          containerPort: 8443
          hostPort: 8443
          protocol: TCP
      livenessProbe:
        httpGet:
          path: /ready
          port: admin
        failureThreshold: 1
        periodSeconds: 5
      volumeMounts:
        - name: envoy-sidecar-bootstrap
          mountPath: /etc/envoy/bootstrap
        - name: envoy-sidecar-client-cert
          mountPath: /etc/envoy/tls/client
  volumes:
    - name: envoy-sidecar-bootstrap
      configMap:
        name: envoy-sidecar-bootstrap
    - name: envoy-sidecar-client-cert
      secret:
        secretName: envoy-sidecar-client-cert

---
apiVersion: envoy.marin3r.3scale.net/v1alpha1
kind: EnvoyConfig
metadata:
  name: proxy-config
spec:
  nodeID: envoy1
  serialization: yaml
  envoyResources:
    listeners:
      - name: https
        value: |
          name: https
          address: { socket_address: { address: 0.0.0.0, port_value: 8443 }}
          filter_chains:
            - filters:
              - name: envoy.http_connection_manager
                typed_config:
                  "@type": type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager
                  stat_prefix: ingress_http
                  route_config:
                    name: local_route
                    virtual_hosts:
                      - name: my-proxy
                        domains: ["*"]
                        routes:
                          - match: { prefix: "/" }
                            direct_response: { status: 200, body: { inline_string: ok }}
                  http_filters: [ name: envoy.router ]
              transport_socket:
                name: envoy.transport_sockets.tls
                typed_config:
                  "@type": "type.googleapis.com/envoy.api.v2.auth.DownstreamTlsContext"
                  common_tls_context:
                    tls_certificate_sds_secret_configs:
                      - name: envoy1.defaul.svc
                        sds_config: { ads: {}}